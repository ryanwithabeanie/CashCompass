import { Pie, Line } from 'react-chartjs-2';
import { marked } from 'marked';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { getBaseButtonStyle, getButtonHoverHandlers, buttonColors } from '../utils/buttonStyles';

function Dynamics({ 
  user,
  summary, 
  summaryLoading, 
  summaryError, 
  isGeneratingSummary, 
  generateNewSummary, 
  pieData, 
  lineData 
}) {
  
  const handleDownloadSummaryPDF = () => {
    // Helper function to convert image to grayscale
    const convertToGrayscale = (canvas) => {
      const tempCanvas = document.createElement('canvas');
      const tempCtx = tempCanvas.getContext('2d');
      tempCanvas.width = canvas.width;
      tempCanvas.height = canvas.height;
      
      tempCtx.drawImage(canvas, 0, 0);
      const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
      const data = imageData.data;
      
      for (let i = 0; i < data.length; i += 4) {
        const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;
        data[i] = gray;     // Red
        data[i + 1] = gray; // Green
        data[i + 2] = gray; // Blue
      }
      
      tempCtx.putImageData(imageData, 0, 0);
      return tempCanvas.toDataURL('image/png');
    };
    
    // Create new PDF document
    const doc = new jsPDF();
    let currentY = 15;
    
    // Set document title
    doc.setFontSize(14);
    doc.text('Weekly Financial Summary', 20, currentY);
    
    // Add current date and user info
    doc.setFontSize(9);
    const currentDate = new Date().toLocaleDateString();
    doc.text(`Generated on: ${currentDate}`, 20, currentY + 7);
    
    // Add generated by user info
    console.log('User object in Summary PDF:', user); // Debug log
    
    // Try to get user info from multiple sources
    let username = 'User';
    if (user && (user.username || user.email)) {
      username = user.username || user.email;
    } else {
      // Fallback: try to get from localStorage
      try {
        const storedUser = localStorage.getItem('user');
        if (storedUser) {
          const parsedUser = JSON.parse(storedUser);
          username = parsedUser.username || parsedUser.email || 'User';
        }
      } catch (e) {
        console.log('Could not parse stored user:', e);
      }
    }
    
    doc.text(`Generated by: ${username}`, 20, currentY + 13);
    currentY += 26;
    
    // Check if there's an error in summary
    if (summaryError) {
      doc.setFontSize(10);
      doc.text('Status:', 20, currentY);
      currentY += 6;
      
      doc.setFontSize(9);
      const errorText = doc.splitTextToSize(summaryError, 170);
      doc.text(errorText, 20, currentY);
      currentY += errorText.length * 4 + 10;
    }
    
    // Add weekly comparison data if summary exists
    if (summary && !summaryLoading) {
      // Weekly Comparison Table (more compact)
      doc.setFontSize(10);
      doc.text('Weekly Comparison', 20, currentY);
      currentY += 8;
      
      const weeklyHeaders = ['Metric', 'This Week', 'Last Week', 'Change'];
      const weeklyData = [
        [
          'Income',
          `$${summary.currentWeek?.income ?? 0}`,
          `$${summary.previousWeek?.income ?? 0}`,
          `$${(summary.currentWeek?.income ?? 0) - (summary.previousWeek?.income ?? 0)}`
        ],
        [
          'Expense',
          `$${summary.currentWeek?.expense ?? 0}`,
          `$${summary.previousWeek?.expense ?? 0}`,
          `$${(summary.currentWeek?.expense ?? 0) - (summary.previousWeek?.expense ?? 0)}`
        ],
        [
          'Savings',
          `$${summary.currentWeek?.savings ?? 0}`,
          `$${summary.previousWeek?.savings ?? 0}`,
          `$${(summary.currentWeek?.savings ?? 0) - (summary.previousWeek?.savings ?? 0)}`
        ]
      ];
      
      autoTable(doc, {
        head: [weeklyHeaders],
        body: weeklyData,
        startY: currentY,
        styles: {
          fontSize: 8,
          cellPadding: 2,
          textColor: [0, 0, 0],
          lineColor: [0, 0, 0],
          lineWidth: 0.1
        },
        headStyles: {
          fillColor: [220, 220, 220],
          textColor: [0, 0, 0],
          fontStyle: 'bold'
        },
        bodyStyles: {
          fillColor: [255, 255, 255]
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245]
        },
        columnStyles: {
          0: { cellWidth: 30 },
          1: { cellWidth: 35, halign: 'right' },
          2: { cellWidth: 35, halign: 'right' },
          3: { cellWidth: 30, halign: 'right' }
        }
      });
      
      currentY = doc.lastAutoTable.finalY + 10;
      
      // AI Comment (more compact)
      if (summary.aiComment) {
        doc.setFontSize(10);
        doc.text('AI Insights', 20, currentY);
        currentY += 6;
        
        doc.setFontSize(8);
        let cleanComment = summary.aiComment.replace(/[#*_`]/g, '').trim();
        // Limit comment length for space efficiency
        if (cleanComment.length > 400) {
          cleanComment = cleanComment.substring(0, 400) + '...';
        }
        const commentLines = doc.splitTextToSize(cleanComment, 170);
        doc.text(commentLines, 20, currentY);
        currentY += commentLines.length * 3 + 10;
      }
    }
    
    // Add charts section on same page if space allows, otherwise new page
    if (currentY > 180) {
      doc.addPage();
      currentY = 15;
    }
    
    // Charts section title
    doc.setFontSize(10);
    doc.text('Visual Analysis', 20, currentY);
    currentY += 10;
    
    // Add charts side by side if both are available
    if (pieData && pieData.labels && pieData.labels.length > 0 && 
        lineData && lineData.labels && lineData.labels.length > 0) {
      
      // Pie Chart (left side)
      doc.setFontSize(9);
      doc.text('Expense Distribution', 20, currentY);
      
      try {
        const pieChartCanvas = document.querySelector('canvas');
        if (pieChartCanvas) {
          const grayscaleImage = convertToGrayscale(pieChartCanvas);
          doc.addImage(grayscaleImage, 'PNG', 20, currentY + 5, 50, 50);
        }
      } catch (error) {
        console.log('Could not capture pie chart:', error);
      }
      
      // Line Chart (right side)
      doc.setFontSize(9);
      doc.text('Weekly Trends', 110, currentY);
      
      try {
        const canvases = document.querySelectorAll('canvas');
        const lineChartCanvas = canvases[1];
        if (lineChartCanvas) {
          const grayscaleImage = convertToGrayscale(lineChartCanvas);
          doc.addImage(grayscaleImage, 'PNG', 110, currentY + 5, 70, 50);
        }
      } catch (error) {
        console.log('Could not capture line chart:', error);
      }
      
      currentY += 60; // Move past both charts
      
      // Pie Chart data table (below pie chart)
      const pieHeaders = ['Category', 'Amount', '%'];
      const totalAmount = pieData.datasets[0].data.reduce((sum, value) => sum + value, 0);
      const pieTableData = pieData.labels.map((label, index) => {
        const amount = pieData.datasets[0].data[index];
        const percentage = totalAmount > 0 ? ((amount / totalAmount) * 100).toFixed(0) : '0';
        return [label.length > 12 ? label.substring(0, 12) + '...' : label, `$${amount}`, `${percentage}%`];
      });
      
      autoTable(doc, {
        head: [pieHeaders],
        body: pieTableData,
        startY: currentY,
        margin: { left: 20, right: 110 }, // Left table
        styles: {
          fontSize: 7,
          cellPadding: 1.5,
          textColor: [0, 0, 0],
          lineColor: [0, 0, 0],
          lineWidth: 0.1
        },
        headStyles: {
          fillColor: [220, 220, 220],
          textColor: [0, 0, 0],
          fontStyle: 'bold'
        },
        bodyStyles: {
          fillColor: [255, 255, 255]
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245]
        },
        columnStyles: {
          0: { cellWidth: 25 },
          1: { cellWidth: 20, halign: 'right' },
          2: { cellWidth: 12, halign: 'right' }
        }
      });
      
      // Line Chart data table (below line chart)
      const lineHeaders = ['Week', 'Income', 'Expense', 'Savings'];
      const lineTableData = lineData.labels.map((label, index) => {
        const income = lineData.datasets.find(ds => ds.label === 'Income')?.data[index] || 0;
        const expense = lineData.datasets.find(ds => ds.label === 'Expense')?.data[index] || 0;
        const savings = lineData.datasets.find(ds => ds.label === 'Savings')?.data[index] || 0;
        return [label, `$${income}`, `$${expense}`, `$${savings}`];
      });
      
      autoTable(doc, {
        head: [lineHeaders],
        body: lineTableData,
        startY: currentY,
        margin: { left: 110 }, // Right table
        styles: {
          fontSize: 7,
          cellPadding: 1.5,
          textColor: [0, 0, 0],
          lineColor: [0, 0, 0],
          lineWidth: 0.1
        },
        headStyles: {
          fillColor: [220, 220, 220],
          textColor: [0, 0, 0],
          fontStyle: 'bold'
        },
        bodyStyles: {
          fillColor: [255, 255, 255]
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245]
        },
        columnStyles: {
          0: { cellWidth: 20 },
          1: { cellWidth: 18, halign: 'right' },
          2: { cellWidth: 18, halign: 'right' },
          3: { cellWidth: 18, halign: 'right' }
        }
      });
      
      currentY = Math.max(doc.lastAutoTable.finalY, currentY + 50) + 10;
      
    } else {
      // If only one chart is available, use the original single-chart layout
      
      // Add Pie Chart if available
      if (pieData && pieData.labels && pieData.labels.length > 0) {
        doc.setFontSize(10);
        doc.text('Expense Distribution', 20, currentY);
        currentY += 8;
        
        try {
          const pieChartCanvas = document.querySelector('canvas');
          if (pieChartCanvas) {
            const grayscaleImage = convertToGrayscale(pieChartCanvas);
            doc.addImage(grayscaleImage, 'PNG', 20, currentY, 60, 60);
          }
        } catch (error) {
          console.log('Could not capture pie chart:', error);
        }
        
        // Pie chart data table
        const pieHeaders = ['Category', 'Amount', '%'];
        const totalAmount = pieData.datasets[0].data.reduce((sum, value) => sum + value, 0);
        const pieTableData = pieData.labels.map((label, index) => {
          const amount = pieData.datasets[0].data[index];
          const percentage = totalAmount > 0 ? ((amount / totalAmount) * 100).toFixed(0) : '0';
          return [label.length > 15 ? label.substring(0, 15) + '...' : label, `$${amount}`, `${percentage}%`];
        });
        
        autoTable(doc, {
          head: [pieHeaders],
          body: pieTableData,
          startY: currentY,
          margin: { left: 90 },
          styles: {
            fontSize: 7,
            cellPadding: 1.5,
            textColor: [0, 0, 0],
            lineColor: [0, 0, 0],
            lineWidth: 0.1
          },
          headStyles: {
            fillColor: [220, 220, 220],
            textColor: [0, 0, 0],
            fontStyle: 'bold'
          },
          bodyStyles: {
            fillColor: [255, 255, 255]
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245]
          },
          columnStyles: {
            0: { cellWidth: 40 },
            1: { cellWidth: 25, halign: 'right' },
            2: { cellWidth: 15, halign: 'right' }
          }
        });
        
        currentY += 70;
      }
      
      // Add Line Chart if available
      if (lineData && lineData.labels && lineData.labels.length > 0) {
        // Check if we need a new page
        if (currentY > 200) {
          doc.addPage();
          currentY = 15;
        }
        
        doc.setFontSize(10);
        doc.text('Weekly Trends', 20, currentY);
        currentY += 8;
        
        try {
          const canvases = document.querySelectorAll('canvas');
          const lineChartCanvas = canvases[1];
          if (lineChartCanvas) {
            const grayscaleImage = convertToGrayscale(lineChartCanvas);
            doc.addImage(grayscaleImage, 'PNG', 20, currentY, 100, 50);
          }
        } catch (error) {
          console.log('Could not capture line chart:', error);
        }
        
        currentY += 55;
        
        // Line chart data table
        const lineHeaders = ['Week', 'Income', 'Expense', 'Savings'];
        const lineTableData = lineData.labels.map((label, index) => {
          const income = lineData.datasets.find(ds => ds.label === 'Income')?.data[index] || 0;
          const expense = lineData.datasets.find(ds => ds.label === 'Expense')?.data[index] || 0;
          const savings = lineData.datasets.find(ds => ds.label === 'Savings')?.data[index] || 0;
          return [label, `$${income}`, `$${expense}`, `$${savings}`];
        });
        
        autoTable(doc, {
          head: [lineHeaders],
          body: lineTableData,
          startY: currentY,
          styles: {
            fontSize: 7,
            cellPadding: 1.5,
            textColor: [0, 0, 0],
            lineColor: [0, 0, 0],
            lineWidth: 0.1
          },
          headStyles: {
            fillColor: [220, 220, 220],
            textColor: [0, 0, 0],
            fontStyle: 'bold'
          },
          bodyStyles: {
            fillColor: [255, 255, 255]
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245]
          },
          columnStyles: {
            0: { cellWidth: 30 },
            1: { cellWidth: 25, halign: 'right' },
            2: { cellWidth: 25, halign: 'right' },
            3: { cellWidth: 25, halign: 'right' }
          }
        });
        
        currentY = doc.lastAutoTable.finalY + 8;
      }
    }
    
    // Add compact final summary
    if (summary && !summaryError && !summaryLoading && currentY < 250) {
      doc.setFontSize(9);
      doc.text('Financial Health Summary:', 20, currentY);
      currentY += 5;
      
      const thisWeekSavings = summary.currentWeek?.savings ?? 0;
      const lastWeekSavings = summary.previousWeek?.savings ?? 0;
      const savingsChange = thisWeekSavings - lastWeekSavings;
      
      doc.setFontSize(8);
      let healthComment = '';
      if (thisWeekSavings > 0) {
        healthComment = `Saving $${thisWeekSavings} this week (${savingsChange >= 0 ? '+' : ''}$${savingsChange} vs last week).`;
      } else if (thisWeekSavings < 0) {
        healthComment = `Overspending by $${Math.abs(thisWeekSavings)} this week.`;
      } else {
        healthComment = `Budget perfectly balanced this week.`;
      }
      
      const healthLines = doc.splitTextToSize(healthComment, 170);
      doc.text(healthLines, 20, currentY);
    }
    
    // Save the PDF
    doc.save('Weekly-Financial-Summary.pdf');
  };
  return (
    <div style={{ width: '100%' }}>
      {/* Summary Section with Generate Button */}
      <div style={{
        backgroundColor: 'rgba(255, 255, 255, 0.1)',
        padding: '1.5rem',
        marginBottom: '2rem',
        borderRadius: '12px',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        backdropFilter: 'blur(12px)',
        boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
        position: 'relative'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem', flexWrap: 'wrap', gap: '1rem' }}>
          <h2 style={{ margin: '0', color: '#222', textAlign: 'left', fontSize: '1.5rem', fontWeight: '600', userSelect: 'none' }}>Weekly Summary</h2>
          <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
            <button
              onClick={generateNewSummary}
              disabled={summaryLoading || isGeneratingSummary}
              style={{
                ...getBaseButtonStyle(buttonColors.primary, summaryLoading || isGeneratingSummary),
                padding: "0.7rem 1.5rem",
                opacity: summaryLoading || isGeneratingSummary ? 0.7 : 1
              }}
              {...(!summaryLoading && !isGeneratingSummary ? getButtonHoverHandlers('rgba(52, 152, 219, 0.8)', 'rgba(52, 152, 219, 1)') : {})}
            >
              {summaryLoading ? "Generating..." : summary ? "Generate Another Summary" : "Generate Summary"}
            </button>
            
            {/* Download Summary PDF Button - Only visible when summary exists */}
            {summary && !summaryLoading && (
              <button
                onClick={handleDownloadSummaryPDF}
                style={{
                  ...getBaseButtonStyle(buttonColors.success),
                  padding: '0.7rem 1.5rem'
                }}
                {...getButtonHoverHandlers('rgba(46, 204, 113, 0.8)', 'rgba(46, 204, 113, 1)')}
              >
                Download Summary PDF
              </button>
            )}
          </div>
        </div>

        {summaryLoading && (
          <div style={{
            padding: '1rem',
            fontStyle: 'italic',
            textAlign: 'center'
          }}>
            Generating Summary...
          </div>
        )}
        
        {summaryError && (
          <div style={{
            backgroundColor: '#fff3f3',
            padding: '1rem',
            borderRadius: '8px',
            border: '1px solid #ffcccc',
            color: '#cc0000',
            fontStyle: 'italic',
            marginBottom: '1rem'
          }}>
            {summaryError}
          </div>
        )}
        
        {summary && !summaryLoading && (
          <div style={{
            backgroundColor: 'rgba(255, 255, 255, 0.1)',
            padding: '1rem',
            borderRadius: '12px',
            position: 'relative',
            backdropFilter: 'blur(8px)',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <div style={{ display: 'flex', gap: '2rem' }}>
              <div style={{ flex: 1 }}>
                <h3 style={{ userSelect: 'none' }}>This Week</h3>
                <p style={{ userSelect: 'none' }}><strong>Income:</strong> ${summary.currentWeek?.income ?? 0}</p>
                <p style={{ userSelect: 'none' }}><strong>Expense:</strong> ${summary.currentWeek?.expense ?? 0}</p>
                <p style={{ userSelect: 'none' }}><strong>Savings:</strong> ${summary.currentWeek?.savings ?? 0}</p>
              </div>
              <div style={{ flex: 1 }}>
                <h3 style={{ userSelect: 'none' }}>Last Week</h3>
                <p style={{ userSelect: 'none' }}><strong>Income:</strong> ${summary.previousWeek?.income ?? 0}</p>
                <p style={{ userSelect: 'none' }}><strong>Expense:</strong> ${summary.previousWeek?.expense ?? 0}</p>
                <p style={{ userSelect: 'none' }}><strong>Savings:</strong> ${summary.previousWeek?.savings ?? 0}</p>
              </div>
            </div>
            {/* AI Insight */}
            {summary.aiComment && (
              <div
                style={{
                  marginTop: '1.5rem',
                  backgroundColor: '#f6f8fa',
                  padding: '1rem',
                  border: '1px solid #ccc',
                  borderRadius: '8px',
                  color: '#333',
                  fontSize: '0.95rem',
                  lineHeight: '1.6',
                }}
                dangerouslySetInnerHTML={{
                  __html: marked(summary.aiComment),
                }}
              />
            )}
          </div>
        )}
      </div>

      {/* Charts Section */}
      {summary && !summaryLoading && (
        <div style={{
          display: 'flex',
          gap: '2rem',
          justifyContent: 'center',
          marginBottom: '2rem',
          flexWrap: 'wrap'
        }}>
          {/* Pie Chart */}
          <div style={{
            flex: '1 1 320px',
            minWidth: 320,
            maxWidth: 400,
            backgroundColor: 'rgba(255, 255, 255, 0.1)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            borderRadius: '12px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
            backdropFilter: 'blur(12px)',
            padding: '1.5rem',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center'
          }}>
            <h3 style={{ color: '#222', marginBottom: '1rem', textAlign: 'left', fontSize: '1.2rem', fontWeight: '600', userSelect: 'none' }}>Pie Chart</h3>
            <div style={{ width: 300, height: 300 }}>
              <Pie
                data={pieData}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: { position: 'bottom' }
                  }
                }}
              />
            </div>
          </div>
          {/* Line Chart */}
          <div style={{
            flex: '1 1 420px',
            minWidth: 320,
            maxWidth: 500,
            backgroundColor: 'rgba(255, 255, 255, 0.1)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            borderRadius: '12px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
            backdropFilter: 'blur(12px)',
            padding: '1.5rem',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center'
          }}>
            <h3 style={{ color: '#222', marginBottom: '1rem', textAlign: 'left', fontSize: '1.2rem', fontWeight: '600', userSelect: 'none' }}>Linear Graph</h3>
            <div style={{ width: 400, height: 300 }}>
              <Line
                data={lineData}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: { position: 'top' },
                  },
                  scales: {
                    x: { title: { display: true, text: 'Week' } },
                    y: { title: { display: true, text: 'Amount ($)' }, beginAtZero: true }
                  }
                }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Dynamics;
